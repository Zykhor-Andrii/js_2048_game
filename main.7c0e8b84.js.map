{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","messageStart","messageWin","messageLose","gameScore","fieldRows","querySelectorAll","size","score","isWin","gameField","move","e","key","left","right","down","up","classList","remove","isPosibleToMove","removeEventListener","reset","contains","add","addNumber","findEmptyCell","randomY","randomX","Math","random","emptyCells","forEach","row","rowIndex","cell","columnIndex","push","floor","length","render","col","elem","children","textContent","className","prevBoard","JSON","parse","stringify","r","slide","compareArr","boards","filterZero","filter","num","newRow","i","reverse","c","transposeGameField","map","_","colIndex","checkRows","checkColumns","some","j","addEventListener","replace","innerText"],"mappings":"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","file":"main.7c0e8b84.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst size = 4;\nlet score = 0;\nlet isWin = false;\n\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbutton.addEventListener('click', e => {\n  document.addEventListener('keydown', move);\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    isWin = false;\n    reset();\n  }\n\n  addNumber();\n  addNumber();\n  render();\n});\n\nfunction move(e) {\n  switch (e.key) {\n    case 'ArrowLeft':\n      left();\n      break;\n\n    case 'ArrowRight':\n      right();\n      break;\n\n    case 'ArrowDown':\n      down();\n      break;\n\n    case 'ArrowUp':\n      up();\n      break;\n\n    default:\n      return;\n  }\n\n  if (isWin) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (!isPosibleToMove()) {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', move);\n  }\n}\n\nfunction reset() {\n  score = 0;\n\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  if (!messageLose.classList.contains('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n};\n\nfunction addNumber() {\n  const [randomY, randomX] = findEmptyCell();\n\n  gameField[randomY][randomX] = Math.random() < 0.9 ? 2 : 4;\n};\n\nfunction findEmptyCell() {\n  const emptyCells = [];\n\n  gameField.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nfunction render() {\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const elem = fieldRows[row].children[col];\n      const cell = gameField[row][col];\n\n      if (cell === 0) {\n        elem.textContent = '';\n        elem.className = 'field-cell';\n      } else {\n        elem.textContent = cell;\n        elem.className = `field-cell field-cell--${cell}`;\n      }\n    };\n  };\n\n  gameScore.textContent = score;\n};\n\nfunction left() {\n  const prevBoard = JSON.parse(JSON.stringify(gameField));\n\n  for (let r = 0; r < size; r++) {\n    let row = gameField[r];\n\n    row = slide(row);\n    gameField[r] = row;\n  };\n\n  if (compareArr(prevBoard, gameField)) {\n    addNumber();\n  }\n\n  render();\n}\n\nfunction compareArr(prevBoard, boards) {\n  return JSON.stringify(prevBoard) !== JSON.stringify(boards);\n};\n\nfunction filterZero(row) {\n  return row.filter(num => num);\n}\n\nfunction slide(row) {\n  let newRow = row;\n\n  newRow = filterZero(newRow);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n  newRow = filterZero(newRow);\n\n  while (newRow.length < size) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction right() {\n  const prevBoard = JSON.parse(JSON.stringify(gameField));\n\n  for (let r = 0; r < size; r++) {\n    let row = gameField[r];\n\n    row.reverse();\n    row = slide(row);\n\n    row.reverse();\n    gameField[r] = row;\n  };\n\n  if (compareArr(prevBoard, gameField)) {\n    addNumber();\n  }\n\n  render();\n}\n\nfunction down() {\n  const prevBoard = JSON.parse(JSON.stringify(gameField));\n\n  for (let c = 0; c < size; c++) {\n    let row = [\n      gameField[0][c],\n      gameField[1][c],\n      gameField[2][c],\n      gameField[3][c],\n    ];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < size; r++) {\n      gameField[r][c] = row[r];\n    };\n  };\n\n  if (compareArr(prevBoard, gameField)) {\n    addNumber();\n  }\n\n  render();\n}\n\nfunction up() {\n  const prevBoard = JSON.parse(JSON.stringify(gameField));\n\n  for (let c = 0; c < size; c++) {\n    let row = [\n      gameField[0][c],\n      gameField[1][c],\n      gameField[2][c],\n      gameField[3][c],\n    ];\n\n    row = slide(row);\n\n    for (let r = 0; r < size; r++) {\n      gameField[r][c] = row[r];\n    };\n  };\n\n  if (compareArr(prevBoard, gameField)) {\n    addNumber();\n  }\n\n  render();\n}\n\nfunction transposeGameField() {\n  gameField = gameField[0]\n    .map((_, colIndex) => gameField.map(row => row[colIndex]));\n}\n\nfunction isPosibleToMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  transposeGameField();\n\n  return checkColumns();\n}\n\nfunction checkRows() {\n  for (let i = 0; i < size; i++) {\n    if (gameField[i].some(cell => cell === 0)\n      || gameField[i].some((cell, j) => cell === gameField[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction checkColumns() {\n  for (let i = 0; i < size; i++) {\n    if (gameField[i].some((cell, j) => cell === gameField[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]}